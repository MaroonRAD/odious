using ReMod.Core;
using System;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReModCE.Photon;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Realtime;
using UnityEngine;
using VRC.SDKBase;
using ReMod.Core.UI.QuickMenu;
using ReMod.Core.Managers;
using ReModCE.Core;
using ReMod.Core.Unity;
using ReModCE.EvilEyeSDK;
using Il2CppSystem;
using Object = UnityEngine.Object;

namespace ReModCE.Exploits 
{
    internal class EmojiLag : ModComponent
	{
        public bool _EmojiLagEnabled;
        private static ReMenuToggle _EmojiLagToggled;
        public EmojiLag()
        {
        }
		// i just wanna get a build pushed out so this is commented out until i fix it
		//      public override void OnUiManagerInit(UiManager uiManager)
		//      {
		//          var exploitsMenu = uiManager.MainMenu.GetCategoryPage("Exploits").GetCategory("RPC");
		//	_EmojiLagToggled = exploitsMenu.AddToggle("Emoji Spam/Lagger", "Spams Emojis by spamming the RPC for it, potential to lag users.", StartEmoji, _EmojiLagEnabled);
		//      }

		//public void StartEmoji(bool value)
		//{
		//	_EmojiLagEnabled = value;
		//	_EmojiLagToggled?.Toggle(value);

		//	if (_EmojiLagEnabled)
		//	{
		//		MelonCoroutines.Start(this.EmojiSpam());
		//	}
		//	else
		//		MelonCoroutines.Stop(this.EmojiSpam());
		//}

		//      private IEnumerator EmojiSpam()
		//      {
		//          while (_EmojiLagEnabled)
		//          {
		//              for (int i = 0; i < 3; i++)
		//              {
		//                  Networking.RPC(RPC.Destination.All, PlayerWrapper.LocalPlayer().gameObject, "SpawnEmojiRPC", new Il2CppSystem.Object[]
		//                  {
		//                      new Il2CppSystem.Int32
		//                      {
		//                          m_value = int.MinValue
		//                      }.BoxIl2CppObject()
		//                  });
		//                  if (!_EmojiLagEnabled)
		//                      break;
		//              }
		//              yield return new WaitForSecondsRealtime(0.25f);
		//          }
		//          yield break;
		//      }
	}
}
