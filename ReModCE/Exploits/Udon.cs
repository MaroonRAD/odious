using ReMod.Core.Managers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReMod.Core;
using System;
using ReModCE.Photon;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Realtime;
using UnityEngine;
using ReMod.Core.UI.QuickMenu;
using ReMod.Core.Managers;
using ReModCE.EvilEyeSDK;
using System.Collections;
using VRC.SDKBase;
using Il2CppSystem;

namespace ReModCE.Exploits
{
	internal class Udon : ModComponent
	{
		public bool _UdonSpamEnabled;
		private static ReMenuToggle _UdonSpamToggled;
		public Udon()
		{
		}
		// i just wanna get a build pushed out so this is commented out until i fix it
		//public override void OnUiManagerInit(UiManager uiManager)
		//{
		//	var exploitMenu = uiManager.MainMenu.GetCategoryPage("Exploits").GetCategory("Udon");
		//	_UdonSpamToggled = exploitMenu.AddToggle("Udon Spammer", "Spams UDON events, causing weird things to happen dependent on the world.", StartUdon, _UdonSpamEnabled);
		//}

		//public void StartUdon(bool value)
		//{
		//	_UdonSpamEnabled = value;
		//	_UdonSpamToggled?.Toggle(value);

		//	if (_UdonSpamEnabled)
		//	{
		//		MelonCoroutines.Start(this.PerformUdon());
		//	}
		//	else
		//		MelonCoroutines.Stop(this.PerformUdon());
		//}

  //     public IEnumerator PerformUdon()
  //      {
  //          while (_UdonSpamEnabled)
  //          {
  //              for (int i = 0; i < PlayerWrapper.GetAllPlayers().Length; i++)
  //              {
  //                  if (PlayerWrapper.GetAllPlayers()[i].GetAPIUser().id == PlayerWrapper.LocalPlayer().GetAPIUser().id)
  //                      continue;

  //                  for (int j = 0; j < WorldWrapper.udonBehaviours.Length; j++)
  //                  {
  //                      foreach (string name in WorldWrapper.udonBehaviours[j]._eventTable.Keys)
  //                      {
  //                          Networking.SetOwner(PlayerWrapper.GetAllPlayers()[i].GetVRCPlayerApi(), WorldWrapper.udonBehaviours[j].gameObject);
  //                          WorldWrapper.udonBehaviours[j].SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.Owner, name);
  //                          yield return new WaitForSeconds(0.25f);
  //                      }
  //                      yield return new WaitForSeconds(0.25f);
  //                      if (!_UdonSpamEnabled)
  //                          break;
  //                  }
  //                  yield return new WaitForSeconds(0.25f);
  //                  if (!_UdonSpamEnabled)
  //                      break;
  //              }

  //              yield return new WaitForSeconds(0.25f);
  //          }
  //          yield break;
  //      }
	}
}
