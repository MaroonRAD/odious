using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Pun;
using Photon.Realtime;
using ReMod.Core;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using ReModCE.EvilEyeSDK;
using ReModCE.Photon;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace ReModCE.Exploits
{
    class Disconnect : ModComponent
    {
        public bool _DisconnectEnabled;
        private static ReMenuToggle _DisconnectToggled;
        public Disconnect()
        {
        }
		// i just wanna get a build pushed out so this is commented out until i fix it
		//      public override void OnUiManagerInit(UiManager uiManager)
		//      {
		//          var exploitMenu = uiManager.MainMenu.GetCategoryPage("Exploits").GetCategory("Events");
		//          _DisconnectToggled = exploitMenu.AddToggle("Desync", "Attempts to desync lobby using invalid event data.", StartDisconnect, _DisconnectEnabled);
		//      }

		//      public void StartDisconnect(bool value)
		//      {
		//	_DisconnectEnabled = value;
		//	_DisconnectToggled?.Toggle(value);

		//	if (_DisconnectEnabled)
		//          {
		//              MelonCoroutines.Start(this.PerformDisconnect());
		//          }
		//          else
		//              MelonCoroutines.Stop(this.PerformDisconnect());
		//      }

		//private IEnumerator PerformDisconnect()
		//{
		//	PhotonView[] photonViews = Resources.FindObjectsOfTypeAll<PhotonView>().ToArray<PhotonView>();
		//	while (_DisconnectEnabled)
		//	{
		//		int num;
		//		for (int i = 0; i < 3; i = num + 1)
		//		{
		//			for (int j = 0; j < photonViews.Length; j = num + 1)
		//			{
		//				if (!_DisconnectEnabled)
		//				{
		//					yield break;
		//				}
		//				PhotonExtensions.OpRaiseEvent(210, new int[]
		//				{
		//					photonViews[j].viewIdField,
		//					PlayerWrapper.LocalPlayer().GetVRCPlayerApi().playerId
		//				}, new RaiseEventOptions
		//				{
		//					field_Public_ReceiverGroup_0 = (ReceiverGroup)1,
		//					field_Public_EventCaching_0 = 0
		//				}, default(SendOptions));
		//				bool flag = photonViews.Length % 3 == 0;
		//				if (flag)
		//				{
		//					yield return new WaitForSecondsRealtime(0.1f);
		//				}
		//				if (!_DisconnectEnabled)
		//                      {
		//					yield break;
		//                      }
		//				PhotonExtensions.OpRaiseEvent(209, new int[]
		//				{
		//					photonViews[j].viewIdField,
		//					PlayerWrapper.LocalPlayer().GetVRCPlayerApi().playerId
		//				}, new RaiseEventOptions
		//				{
		//					field_Public_ReceiverGroup_0 = (ReceiverGroup)1,
		//					field_Public_EventCaching_0 = 0
		//				}, default(SendOptions));
		//				if (!_DisconnectEnabled)
		//				{
		//					yield break;
		//				}
		//				num = j;

		//			}
		//			if (!_DisconnectEnabled)
		//			{
		//				yield break;
		//			}
		//			num = i;

		//		}
		//		yield return new WaitForEndOfFrame();
		//	}
		//	MelonLogger.Msg($"Desync has ended!");
		//	yield break;
		//}
	}
}
